王春梅  wangcm@tecu.cn  qq:1838367529

行业介绍、技术和课程

一、为什么学习WEB前端
	1、行业好、火、就业、趣味、学习容易
	2、web前端是进入互联网开发行业的捷径


二、什么是web前端
	1、什么是 web？---使用浏览器去访问的程序，web程序，习惯性的称为网站，细分为：电商网站、门户网站、应用程序（OA/CRM）等
		exe，可执行的桌面应用程序

	2、什么是 web前端？
		web程序的代码存储在sever端
		代码分为两种：一种是运行在客户端，一种运行在服务器端
		运行在客户端浏览器里的代码----前端代码
		运行在服务器端的代码---后台代码

	3、完整的优秀的web程序：前端 + 后台

	4、后台：JAVA、PHP、ASP.net、python、node.js

	5、前端：业界标准，不分软件厂商

	6、为什么说前景好，火？--前端是从后台分化出来
		前端决定了用户体验----决定了用户的需求
		多平台的矛盾---web前端技术
		已有的技术上做升级----HTML5--标准，某一个技术

三、都需要学什么
	1、静态页面编写--设计图编程为网页.html文件，可以在浏览器里运行
	2、添加页面功能：动效、页面交互
	3、和服务器的交互
	4、复杂开发：HTML5、框架技术
	5、移动端开发、微信 开发

四、学习方式
	1、纯手写代码：前三个阶段，不借助于开发工具；最后一个阶段，使用开发工具
		---技术笔试、打下扎实的代码功底
		---学习难度：打字速度、英文单词

	2、提高代码量

五、时间安排
	训练营：9:30-12:00  2:00-5:00

	正式开班：12*（6+1）
		8:30-9:00  --早自习
		9:00-12:00
	
		2:00-6:00

		6:30-8:30---晚自习

		周六：自习

		项目课：完成自己的个人作品
		

六、具体的技术
	HTML ----构建页面
	CSS  ----样式，CSS3
	JavaScript   ---- 页面的功能
	其它技术


HTML
一：HTML 概述
	1、什么是 HTML：超文本标记语言
		a、标记语言：使用一对对的<>括起来的标记，构建页面
		b、超文本：使用超级链接将多个页面链接起来，代码为纯文本类型
		c、用于编写网页，其文件以 .html/.htm 为后缀
		d、是一种解释性的语言
			编译性：保证整个代码都没有语法错误，运行起来---后台语言
			解释性：即使代码有语法错误，依然运行起来，效果不可预料----web前端代码

	2、怎么写、怎么运行
		代码编写：使用任何文本编辑工具
		代码运行：使用浏览器（IE、firefox、chrome、opera、safari）

	3、测试第一个网页
		创建一个.html的文件：创建一个文本文件 ，修改后缀
		使用编辑工具打开，写入 HTML 代码：文字和HTML标记混合体
		使用浏览器运行，查看效果
		

二：HTML的语法
	1、语法
		双标记：封闭类型的标记，有开始和结束标记
			<u></u>  <h1></h1>
		单标记：非封闭类型的标记，只有开始，没有结束标记
			<br />
		标记可以嵌套，形成复杂的语法

		属性（特征）：标记可以拥有属性，描述相关的特征
			定义在开始标记里，用空格隔开
			属性名="属性值" 
			属性名='属性值'
			可以有多个属性，彼此之间用空格隔开

		其它名词：标记、标签、元素

	2、标准html文档的格式
		<!DOCTYPE HTML>		---文档类型声明
		<html>			---整个html文档
			<head></head>   ---文档头
			<body></body>   ---文档体
		</html>

	3、文档类型声明：指示文档的版本、风格
		<!DOCTYPE HTML>---html5的风格

	4、<html></html>---包含整个文档内容

	5、head--文档头，为文档进行一些整体的定义
		<title>xxx</title>：为文档定义标题
		<meta />：元数据，定义网页的一些基本信息，比如字符编码集、刷新频率、搜索关键字等

<meta name="keywords" content="css3,HTML5" />--提高网页被搜索引擎搜索到的概率

<meta http-equiv="refresh" content="10"/>--刷新频率

<meta charset="utf-8" />---字符编码集

	6、body---文档主体，包含所有显示出来的内容

	7、注释：可能需要为代码添加一些说明性的文字，不需要参与页面的显示
		<!--  sfsfs  -->


	8、所有的代码，必须是英文字符，不区分大小写--建议使用全小写
	   建议使用适当的缩排


<body>
	aaaa
	<div></div>
	<p></p>
	12233
</body>


三、文本：用于在页面上显示文本用的标记
	1、文字可以直接书写在页面上，按照浏览器默认效果显示
	2、特殊字符
		空格折叠：空格和换行，合成一个空格
		有些字符，已经赋予了特定的意义
		有些字符，是键盘上没有
			---使用“字符实体”替代它
			&lt;   <   less than
			&gt;   >   greater than
			&copy;  版权所有的符号

	3、文本标题：将文本以突出的方式显示出来
		---独占一行、文字加粗变大、段落行间距
		 <h1></h1> --1号标题文本		
		<h2>---<h6>

	4、段落标记：有些文本自成一个段落
		---独占一行、段落行间距
		<p></p>

	5、换行符：<br />---回车，没有其他额外的效果
	

	6、文本格式
		<u></u>  下划线  underline
		<i></i>   倾斜   italic
		<b></b>   加粗   bold

	7、div：分组/分区元素，常用于划分页面的构成块
		<div></div>
		---块级

	8、span	：行内标记
		<span></span>
		常用于标识出来一行中的某些文本，用于设置样式

	9、块级：标记会独占一行，比如 p/h/div
	   行内：可以和其他人位于同一行，比如 b/i/u/span

四、图像和链接
	0、WEB程序中的路径---URL--统一资源定位器
		相对路径：--资源相对于当前文件而言,位于同一台机器上
			<img src="1.jpg" />--图片位于和当前html文件同一个路径（文件夹）下
			<img src="images/1.jpg" />--当前html文件所在的路径下，有个文件夹images，里面有个1.jpg

		绝对路径：全路径，完整路径--访问其他机器上的资源		
<img src="http://www.jd.com/product/images/1.jpg"/>
		
		完整的 URL 构成：
			通信协议   http://
			机器地址   域名或者IP
			路径       product/images
			文件       1.jpg

网络：internet，机器连接起来，有通信的可能性
基于网络，可以进行各种通信应用（通讯协议不同）
	email、web、ftp、telnet。。。
	smtp   http  ftp
ftp://192....


	1、图像
		<img src="images/1.jpg" width="" height="" />

	2、超级链接
		<a href="index.html">点击的内容</a>
		<a href="user/order.html">点击的内容</a>
			---相对路径，访问同一个站点的内容

		<a href="http://www.jd.com" target="_blank">去往京东</a>
			---绝对路径，访问其他站点内容


五、列表：常用于表示一系列相关的内容
	1、<ol>：有序列表  ordered list---会在列表项的前面加上一些顺序标识

	2、<ul>：无序列表  unorder.. ---列表项的前面的标识符，没有顺序

	3、<li>:列表项    list item 

		-----块级，应该可以包含其他块级或者行内元素
		-----不能破坏列表的结构（列表中包含列表项，列表项中再包含其他内容）

	4、列表的嵌套：在一个列表中包含其他列表，形成复杂的树形结构

		<ul>
			<li>
				<div>
					<a></a>
				</div>
			</li>
		</ul>


浏览器调试


六、表格


七：表单


CSS
一、CSS 概述
	1、为页面定义样式，有两种方式
		使用 html 标签的样式属性：不通用，某个样式属性往往仅限于某些或者某个标签用；不方便重用和维护

		使用 CSS 代码：通用（所有的标签都可以）、重用和维护
<body bgcolor="gray">
<p align="center"></p>
<img width="200" height="100" />---HTML的标签属性

<img style="width:200;height:100;"/>---使用CSS

	2、使用CSS的优点
		实现页面内容和表现的分离，提高代码的可重用性和可维护性
		html文件负责页面的内容；css文件负责页面的表现样式
		实现换主题的效果

	3、层叠样式表，级联样式表
		继承：子元素可以继承父元素的某些样式
			---如果多种样式定义，彼此之间没有冲突的时候，均起作用；如果发生冲突，按照优先级

		优先级：
			就近优先（作用的范围越小，优先级越高）
			优先级别一样的时候，以后定义的为准


二、CSS的基础语法
	1、属性的名值对
		color：red;
		background-color:gray;

	2、如何使用
		内联样式表：把css代码写在某个标签的 style 属性里---仅限于当前标签用，不能重复使用

		内部样式表：把css 代码写在head里的style里---由当前页面上的所有标签重用

		外部样式表：把css代码写在单独的.css文件里，在html页面的head里使用link调用它
		---可以供很多页面使用，优先建议使用


	3、语法细节
		必须使用英文字符
		样式选择器 {样式属性名：值;}
		p {color：red；}

		添加css的代码注释

三、样式选择器：决定谁使用这些样式
	1、元素选择器：以html标签的名称作为选择器
		h1 {}
		p {}
		div {}
		---特点：简单，范围广
		    不足：不能做细分，不能跨元素种类
			适用于为某种标签定义统一的样式

	2、ID 选择器：以元素的 id 属性的值作为选择器
		html文件中
			<标签 id="v1" />
		CSS 文件中
			#v1 {}
		---特点：限于某一个元素使用
			适用于为页面上的某个特殊的元素定义它特有的样式，常用于页面的大块构成块
		

	3、class（类）选择器：以元素的 class 属性的值作为选择器
		html 文件中
			<标签 class="s1" />
		css 文件中
			.s1 {}
		---特点：划分一定的范围来定义样式

	4、后代选择器：以元素的层次包含关系作为选择器--只要被包含，无论是子级或者其他层级
		html 文件中	
			<div>aa<b>bb</b>cc</div>
			<b>ddd</b>

		css 文件中：div中的b，红色
			div b {color:red;}

	5、子代选择器：只选择元素的子级元素
		html 文件中	
			<div>aa<b>bb</b>cc</div>
			<b>ddd</b>

		css 文件中：div中的那些作为子元素存在的b，红色
			div>b {color:red;}

	   多种变化(组合用法)：
		div ul li a {}
		#d1 a {}
		.cur>div>a {}


	6、状态伪类选择器：选择元素的某种状态，为其定义样式
		:hover {color:red;}  悬停悬浮--鼠标移入，适用于所有的元素
		:link {}	--未访问过的链接--a
		:active {}	--激活的状态，单击
		:visited {}	--访问过的链接--a
		:focus {}	--获得焦点的状态，获得焦点开始录入

	   经常和其他选择器结合使用:限制选择的范围
		h3:hover {}
		#d1:hover {}
		.s1:hover {}
		div a:hover {}

四、尺寸和边框：大小和边框的问题
	0、尺寸的单位
		绝对单位
			pt：磅  cm  mm  in

		相对单位
			px：像素  %  em
	   颜色的单位
		表示颜色的单词
		color:#3c4e5d;  ---十六进制的数值，表示颜色
红：0-255    124216184--十进制
	      0 1  2  9 a b c d e f
	      10 11             1e 1f
0---0
255 ---ff
		一些常用的颜色
			#000000 #000 --黑色
			#ffffff #fff --白色
		各种灰色
			#666 --文字的颜色 
			#ccc #ddd ---边框或者背景的颜色

	1、尺寸
		width:200px;
		height:300px;

	2、边框：元素周围的边线
		border:5px  solid  red;--简写，四个边相同
		等同于
		border-width:5px;
		border-style:solid;
		border-color:red;

		border-top:1px solid black;
		border-left/right/bottom:;
	
	3、边框倒圆角
		border-radius:5px;

	4、是否所有的元素都可以设置尺寸和边框
		块级元素：都可以
		行内元素：边框有效，尺寸无效


五、框模型、盒子模型（box modal）：边距/间距的问题
	1、边距分为内外：为谁定义样式，以谁作为参照

	2、外边距:自己和周围元素（邻居、父元素）之间的距离
		margin:10px; ---外边距，四个边
			等同于 
				margin-top/left/right/bottom:;
		margin:10px 20px 30px 40px;--分别定义四个方向的边距
			上  右   下    左 ---顺时针
		
		margin:10px 20px;--进一步简化，上下、左右

		margin:xx  auto;--自动，由浏览器计算左右外边距，而且相等---》实现元素在当前行居中显示


	3、内边距：自己和内容（文本或者子元素）之间的距离
		padding:10px;
		padding:10px 20px 30px 40px;
		padding:10px 20px;
		----会导致边框被撑开：width和height定义的是内容区域的大小，用于显示内容，如果设置了内边距，将边框撑开---》内边距是边框和内容之间的距离
		----某些时候用于实现设置行内元素的大小（不能精确的设置大小）

	4、框模型：解决元素的外边距、边框、内边距、尺寸之间的关系
		元素的占地总面积：外边距+边框+内边距+内容
		box modal

	5、思考题：是否所有的元素都可以设置内外边距
		块级元素：可以
		行内元素：内边距有效、左右外边距有效
			  上下外边距无效
			  margin:0px auto;-->不可以实现设置行内元素居中	


六、浮动定位：多个块级元素位于同一行
	1、定位：决定元素的位置
	   默认定位方式：静态布局，块级元素从上向下挨个排列，行内元素在行中从左向右挨个排列
	   有些情况下，需要改变元素的默认定位，实现复杂定位效果
	   浮动定位、相对定位、绝对定位、固定定位

	2、浮动定位
		float:left/right;
		元素将脱离原有的层，向上移动一层，停靠在当前行左侧或者右侧（父元素或者其他浮动元素），原有的位置不再保留，后续的元素才会向上补位


	3、clear:left/right/both;清除周围浮动元素的影响
		因为，元素的位置，受到前面浮动元素的影响（如果上一行的元素浮动了，位置空出来，下一个元素自动向上补位）
		
	4、思考题：是否所有元素都可以设置浮动？
		块级元素
		行内元素：可以，尺寸起效

七、背景
	1、背景色 background-color:#ccc;
		----元素设置单一的纯色
	2、背景图片
		background-image:url("image/a.jpg");
		----框大图小：默认图片平铺的效果
		----框小图大：只能显示图片的一部分
	3、背景图片的尺寸
		background-size:x y;
		---改变背景图片的显示比例，显示在框中，并不能改变图片的原始大小---节约网络流量，建议根据实际需求制作不同尺寸的图片

	4、背景图片的重复
		background-repeat:repeat/repeat-x/repeat-y/no-repeat;

	5、背景图片的位置（以框的左上角为原点，设置图片的左上角的坐标）
		background-position:x y;
		                    10px  30%  left/right/center
	---框大图小：设置图片在框中的位置
	---框小图大：用来显示背景图片中的一部分
	

每一个小图标做成一个图片文件

把多个小图标合成一个图片文件	
			
		
		


八、文字


九、定位。。。



CSS3



http://ssss.ss.com/a.html---技术类，讲CSS3和HTML5

</script><!--index_ok-->


<img src="//ccc.jd.com/cookie_check" width="1" height="1" />
</body>
</html><!--index_ok-->





