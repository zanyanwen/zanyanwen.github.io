随堂笔记
Day01
软件设置
	保存  ctrl+s
	怎么在Editplus新建文本文档
		file-->new-->normal text

	在Editpus中调文字的大小
		Tools--->preferences-->general-->fonts-->调字体的大小-->apply-->ok

	在Editplus中去掉备份文件
		Tools-->preferences-->files-->去掉create backup file when saving的勾(当你保
		存文件的时候会创建备份文件)--->apply-->ok 
HTML：做一些静态的网页
	HTML是用来构建网页的标记语言

	HTML的结构：
	<!doctype html>  定义HTML的类型是HTML5
	<html>
	<head>
		<title>标题</title>
	</head>
	<body>
	</body>
	</html>
怎么解决编码的问题（3个方面） 
	1.看一下保存的文件是不是utf-8的编码（file--->save as）
	2.看一下你的HTML文件中有没有写<meta charset="utf-8">这句话
	3.查看一下你的网页是不是utf-8的编码
	ctrl+b  以浏览器的方式打开
怎么设置以浏览器的方式打开：
	Tools-->preferences-->tools-->选择浏览器和浏览器的位置-->apply-->ok
怎么设置模版
	 Tools-->preferences-->files-->templates-->选中你的模版路径-->apply-->ok
 HTML的注释：为了方便注释代码的功能
	结构：  <!--  注释的内容  -->
	注意：HTML注释的内容在页面上是看不到的，只能在查看页面源代码中看到
标记
	1.单标记（空标记）
		结构：<标记名称> 或者<标记名称/>
		<br>或者<br/>   代表换行
		<hr>或者<hr/>    代表水平线
		属性：宽度(width)  width="百分比/像素"
		高度(size)     size="数字"
		颜色(color)   color="颜色值"
		水平方向对齐方式(align)   left左边   right右边  center中间
                align="left/center/right"
		单标记的属性：
		结构：<标记名称 属性名="属性值">
		例子：  <hr width="60%">
	                <hr width="70%" size="4">
	2.双标记
		结构：<标记名称></标记名称>
		比如：
			<html></html>
			<head></head>
			<title></title>
		双标记的属性：
			<标记名称 属性名="属性值">内容</标记名称>
			例如：<p align="left/center/right">内容</p>

        3.段落 (p)  双标记
		结构：<p>内容</p>
		注意：默认上下会有空隙，字的对齐方式是靠左边的
		p的属性：设置字的对齐方式（align）
		<p align="left/center/right">内容</p>

	4.标题(hn) n代表1~6  双标记
	        结构: <hn>内容</hn>
	                <h1>内容</h1>
	        注意：标题默认上下会有空隙，字体是加粗的，字的对齐方式是靠左边的(align) h1是最大的
	        字，h6是最小的

怎么判断是行内元素还是块级元素
	1.添加背景颜色
	2.刊下一个元素有没有换行

注意：	行内元素不能嵌套块级元素
	p标记不能嵌套其他的块级元素

HTML规范
	1.所有的标记名称推荐小写字母；
	2.单标记必须以/>结束，比如<br/>;
	3.属性可有可无 比如<br/>;
	4.属性是不分先后顺序的；
	5.属性值必须在引号之间（单双引号）

Day02
Day03
url 路径 (统一资源定位器)
	绝对路径：从盘符开始找

	相对路径：
		1）.同级目录（直接写文件名） 
		<img src="1.jpg"/>

		2）.子级目录（先进入子级目录，再写文件名）
		<img src="images/2.jpg"/>

		3）.上级（父级）目录（先返回上级目录，再写图片的文件名）
		 <img src="../3.jpg">
		 ../ 代表返回上一级
		 ../../  返回上两级
	完整的url路径：
		通信协议	http://
		机器地址	域名或IP
		路径		product/images
		文件		1.jpj

图片 
	<img src="路径"/>
	 属性：
	宽度：width=“百分比/像素”
	 高度：height=“像素”
	 alt： 如果图片找不到路径的话，就会出现alt里面的文字  alt=“文字”
	 title：鼠标移入是出现title里面的字，鼠标移出则title里面的字消失。
超链接：实现不同页面之间的跳转
	结构:<a href="路径（URL）">内容</a>  内容可以是图片或者文字。
	属性：
	target：跳转时是否新建一个页面。
	属性值：
	_self:在当前页面中打开。
	_blank:另起一个页面打开。

	<a href="路径" target="_blank">内容</a>
	空连接：<a href="#">内容</a>
	1.链接的表现形式
		1.目标文档为下载资源 <a href="下载资源"></a>
		2.电子邮件链接	    <a href="mailto:zanyanwen@fox.com"></a>
		3.返回页面顶部的空链接 <a href="#"></a>
		4.链接到javascript	<a href="javascript:"></a>
	2.锚点：用于在页面中做记号，允许页面随时随地的跳转到这个标记的位置处。
		1.使用a标记的name属性创建锚点
			1.<a name="no1">服装</a>
			2.<ANY ID="no1"></ANY>    任何标记定义id名称

		2.使用a标记跳转
			<a href="#锚点名称">内容</a>
			<a href="#id名称">内容</a>
		

列表
	1.有序列表
		<ol>
			<li>文字</li>                      文字
			<li><img src="路径"></li>          图片
			<li>
			   <a href="路径">内容</a>         超链接
			</li>
		<ol>
		内容可以是图片、文字、超链接。

		属性：
		type：改变列表项前面的类型（type="i/I/a/A"）
		start:改变列表项前面符号开始的类型（start="数字"）

		用途：

	2.无序列表
		 <ul>
			<li>文字</li>
			<li><img src="路径"></li>
			<li>内容</li>
		 </ul>


		属性：
		type：改变列表项前面的类型
		type="disc/circle/square/none"
		disc    实心圆
		circle  空心圆
		square  实心方块
		none    空心方块

	3.定义列表:图文并茂的时候使用
		<dl>
			<dt>定义内容（定义、问题）</dt>
			<dd>定义详情（回答问题的结果）</dd>
		</dl>	

表格：用来存储数据的
	 结构：	<table>
		<caption>表格标题</caption>
			<tr>
				<td>数据</td>
			</tr>
		</table>

	 table:代表的是表格
	 tr：代表的是行
	 td：代表的是单元格
	 th:如果单元格中的内容有居中和加粗的效果，用th替换td
	
	 table属性：
		 1.width
		 2.height
		 3.bgcolor：背景颜色
		 4.border：设置表格的边框。（border="1"）
		 5.bordercolor:边框颜色
		 6.align:设置表格的对齐方式
		 7.cellspacing:设置表格的外边距(单元格与单元格之间的距离) cellspacing="0"
		 8.cellpadding:设置单元格的内边距 cellpadding="20"
	 tr属性：
		 1.width
		 2.height
		 3.bgcolor：
		 4.align： 该行的内容水平对齐
		 5.valign：该行的内容垂直对齐(top/middle/bottom)
	 td属性：
		1.width

		2.height
		3.bgcolor
		4.align
		5.valign
		6.colspan：设置左右单元格的合并
		7.rowspan: 设置上下单元格的合并
	行分组
		1、表头		<thead></thead>  
		2、表主体	<tbody></tbody>		中间加tr td实现分组 


		3、表尾		<tfoot></tfoot>
		
 表单：（重难点）显示、收集客户的信息，并将信息提交到服务器做处理。
	<from>
            表单控件
	</from>
	表单属性：
		1.action：定义表单被提交时发生的动作（提交到哪 ，后台开发交流得到提交地址 默认提交到本页）
		2.method：定义表单提交数据时的方式
			取值：	1.get （默认值）场合：	获取数据（向服务器要数据时使用）
					特点：显示提交，所提交的数据显示在地址栏上--安全性低
					      提交的数据大小有限制--最大ie只有2kb
				2.post 场合：将数据提交给服务器处理时使用（有保密类型数据的时候）
					特点：安全性高
					      没大小限制
				3.enctype
					作用：编码类型，即表单数据进行编码的方式（允许提交的数据类型）
					取值：	application：默认值（允许普通文字，特殊字符提交给服务器，不允许提交文件）
						multipart/form-date   允许将文件提交给服务器
						text/plain （从来不用）  只允许提交普通字符，不允许提交文件、特殊字符。
				5.name  定义表单名称
					
	
	表单控件：
        1.单行文本框
	    <input type="text" name="txtUsername"/>
	    属性：size：设置文本框的宽度  size="数字"
		  maxlength：最多能输入多少个字符  maxlength="数字"
		  placeholder：设置文本框里面的默认文字  placeholder="文字"（字是灰色的，用的多）
		  value：这只文本框里的默认文字（字是黑色，用的少） 也可以代表真值
		  name:txt为缩写  缩写加功能名称   例如：txtUsername   接受用户名
	2.密码框
	    <input type="password" name="txtUserpwd"/>
	    属性：size：设置文本框的宽度  size="数字"
		   maxlength：最多能输入多少个字符  maxlength="数字"
		   placeholder：设置文本框里面的默认文字  placeholder="文字"（文字是明文的，用的多）
		   value：这只文本框里的默认文字（文字是加密的，用的少）
		name:txt为缩写  缩写加功能名称   例如：txtUserpwd   接受用户名
	3.单选框
	    <input type="radio"/>
	    属性：name：设置单选框名字（为了能实现单选的效果）
	          checked：默认选择的按钮  checked
	4.复选框
	    <input type="checkbox"/>
	    属性：checked：默认选择的按钮
	5.多行文本框(双标记)
	    <textarea></textarea>
	    属性：placeholder:设置多行文本框里面默认的文字（placeholder="文字"）
	          rows：行数
		  cols：列数
	6.浏览框（选择文件）：
	    <input type="file"/>
	7.列表框（下拉框)：
	    <select>
		<option>内容</option>
	    </select>

	8.提交（注册/登陆）按钮
	    <input type="submit"/>
	    属性：value:设置按钮的名字 value="名字"
	9.重置按钮
	    <input type="reset"/>
	    属性：value:设置按钮的名字 reset="名字"
HTML5新增的控件：
	1.幸运色：<input type="color"/>
	2.年龄：<input type="number"/> 
	  属性：max：最大值
	        min：最小值
	3.范围:<input type="range"/>
	  属性：max：最大值
	        min：最小值
		step:走一步增加多少
	4.邮箱：<input type="email"/>
	5.博客：<input type="url"/>
	
	<font color="red" size="18">*<font>

	框架集：
        <frameset rows="100,*">
	   <frame src="上面框架的路径(xx.html)"/>
	   <frmaeset cols="100,*">
	       <frame src="左边框架文件路径(xx.html)"/>
	       <frame src="右边框架文件路径(xx.html)"/>
	   </frameset>
	</frameseet>

结构标记：h5中新标记，用来表示页面布局的，从而提升标签的语义行
	1.<header></header>
		作用：用于定义文档的头部
		注意：允许在页面中出现多次；作为任何部分的头部信息定义
		代替：<div id="header"></div>
	2.<nav></nav>
		作用：用于定义页面的导航链接部分（导航部分）
		代替：<div id="nav"></div>
	3.<section></section>
		作用：用于定义文档中的具体组成部分，主体部分
		代替：<div id="main"></div>
	4.<artital></artital>
		作用：定义独立于文档主体内容的一些其他信息（论坛帖子，新闻消息，博客或微博中的条目）
	5.<footer></footer>
		作用：定义网页的页脚信息（下部分内容）
	6.<aside></aside>
		作用：定义网页中的变量信息


Day 4 
css 层叠样式表（样式表）
	css能做什么？
	能够快速维护页面元素的样式（比如：字的颜色、大小、内外边距，或者图片的高度、宽度）

	HTML和css的关系
	1.HTML是用来构建网页的结构
	2.css是用来构建HTML的样式

	使用css的有点：
		1.实现页面内容和表现的分离，提高代码的可重用性和可维护性。
		2 html文件复制页面的内容，css文件负责页面的表现样式。
		3.实现换主题的效果

	3.层叠样式表，级联样式表
		继承：子元素可以继承父元素的某些样式
		优先：优先级别一样时，就近优先 （作用范围越小，优先级越高）
		      

	css的书写：
	1.行内样式:写在标记元素的内部
	HTML：<标记名称 属性名="属性值" 属性名="属性值">内容</标记名称>
	css：<标记名称 style="属性名：属性值；属性名：属性值">内容</标记名称>
	 注意：= 改为 ：空格 改为 分号

	2.内联样式：写于当前文档的head之间
        <head>
		<style type="text/css">
			选择器{
				属性名：属性值；
				属性名：属性值；
			}
		</style>
	</head>

	3.外联样式：书写与head之间的。但是连接是在外部的css文件。
	步骤：  1.创建css文件css文件的后缀名是 .css ；
		2.在html文件中加载css文件进来；
		   在head中书写：<link type="text/css" rel="stylesheet" href="css文件路径"/>
		3.在css文件中书写样式
		   选择器{
				属性名：属性值；
				属性名：属性值；
			}


选择器
	1.通配选择器：*  选择所有的元素
		*{
			属性名：属性值；
			属性名：属性值；	
		}
	   一般用于清除内外边距和列表前面的符号。
		*{
			padding:0          内边距
			margin:0           外边距
			list-style:none    清除前面的符号
		}
	   默认有内外边距的元素：hn、p、table、ul、li


	
	2.元素选择器
		元素{
			属性名：属性值；
			属性名：属性值；
		}

	
	3.类选择器（class选择器）：class="类名"
		<p class="p1">段落1</p>
		<p>段落2</p>
		注意
		1.类名不能以数字开头
		2.类选择器在使用的时候，要先写点，再写类名
		 .类名{
		    属性名：属性值；
		    属性名：属性值；
		 }
		3.多个类名之间用空格分开
		4.类选择器的类名不是唯一的，可以用在多个选择器身上
	
	4.ID选择器（id="id名"）
		<p id="p1">段落1<p>
		<p>段落2</p>
		
		注意：
		1.id名是唯一的，一个id名只能用在一个元素身上
		2.id选择器在使用时先写#再写id名
			#id名{
				属性名：属性值；
				属性名：属性值；	
			}

	id和class的区别
		1.多个元素之间有公共属性的话，可以取名为class
		2.某个元素具有单独的属性，可取名为id

	5.群组选择器：具有相同属性的时候的一个简写
		选择器1，选择器2，选择器3{
			属性名：属性值；
			属性名：属性值；
		}
		注意
		1.选择器与选择器之间用逗号
		2.一般用于清除内外边距和列表前面的符号
	*选择器 比 群选择器 的效率低
	
	6.后代选择器
		条件：
		1.选择器之间至少是父子关系
		2.选择器与选择器之间使用空格分开
		选择器1 选择器2 选择器3{
			属性名：属性值；
			属性名：属性值；
		}
	7.子代选择器
		条件：
		1.选择器与选择器之间只能存在父子关系
		2.选择器与选择器之间用大于号分隔
		选择器1>选择器2{
			属性名：属性值；
			属性名：属性值；
		}
	
	8.兄弟选择器
		条件：
		1.选择器与选择器之间用+分隔
		2.紧跟在它后面的兄弟才起作用
		选择器1+选择器2{
			属性名：属性值；
			属性名：属性值；
		}
		如果想然后的都起作用，把+号改为~号
		选择器1~选择器2{
			属性名：属性值；
			属性名：属性值；
	
	9.伪类选择器
		元素:link{/*链接尚未访问时的样式*/
			属性名：属性值；
			属性名：属性值；
			}
			a:link{}相当于a{}

		元素:hover{/*鼠标悬浮于元素之上时的样式，适用所有元素*/ 
			属性名：属性值；
			属性名：属性值；
			}

		元素:before{/*在当前元素内容之前添加文字或者图片*/
			content:'文字';
			content:url('图片路径');
			}
		元素:after{/*在当前元素内容之后添加文字或者图片*/
			content:'文字';
			content:url('图片路径');
			}
			注意：图片和文字只能选择一种
		元素:focus{/*元素获得焦点时的样式*/
			属性名：属性值；
			属性名：属性值；
			}
			注意：
		
		hover：鼠标移入      
		link：未访问过的链接
		active：激活的状态
		visited：访问过的链接
		
		例如：
		a：link{访问前的样式}
		a：hover{鼠标移入的样式}
		a：active{鼠标点击时的样式}
		a：visited{访问过的状态}
权值：
	元素的权值是 1
	class的权值是 10
	id的权值是 100
	行内样式的权值是 1000


Day06



溢出：
	overflow：
	overflow-x:
	overflow-y:

	取值:
	visible:可见
	hidding:隐藏
	scroll：溢出加滚动条
	auto：自动（效果跟scroll相似）


轮廓：绘制于元素周围的一条线，位于边框之外的
	属性：
	outline:width style color  轮廓的宽度  样式  颜色
	outline-width:
	outline-style：
	outline-color：

	常用方式：
	outline:0; 
	outline:none;

边框的阴影：为元素添加阴影
	属性：box-shadow
	取值：用空格分开的值列表
	h-shadow:必须值，阴影的水平偏移位置，取值为正数，向右偏，负数，向左偏。
	v-shadow:必须值，阴影的垂直偏移位置，取值为正数，向上偏，负数，向下偏。
	blur：可选 模糊的距离
	spared：阴影的大小、尺寸。
	color：颜色
	inset：可将外部阴影改为内部阴影


背景：主要是由背景图像以及背景颜色组成的
	背景颜色：以单一颜色作为背景填充
	背景图像：以图片作为背景填充
	属性：
	1.背景颜色：background-color：red/blue...;
	2.背景图片：backgroup-image:url('');
	3.背景重复：
		属性：background-repeat
		取值：
		1.repeat:平铺（重复）
		2.no-repeat：不平铺
		3.repeat-x：横向平铺
		4.repeat-y:纵向平铺
	4.背景图片的尺寸：改变图片的显示比例，但并没有改变图片的原始大小。
		属性：background-size：
		取值：
		1.value value  宽高
		2.value% value%
		3.cover  将图片按照比例放大 直到 填满元素空间为止 会出现图片的部分位置溢出元素而看不到
		4.contain 将背景图扩充足够大，直到图片宽度或高度适应元素为止。
	5.背景图片的固定
		属性：background-attachment
		取值：
		scroll  滚动的（默认）
		fixed   固定的，滚动条滚动时不会滚动
	6.背景图片的定位：
		属性：background-position:x y 
		取值：
		1. x y:x代表图片水平为止，y代表垂直方向的位置。xy可以是正负数。
		2.left right center
		框小图大：通过位移显示部分图片
		框大图小：图片在框内的位置

元素样式：


尺寸和边框：大小和边框的问题

	0、	像素：px	相对单位   %   em
		磅：  pt	绝对单位   cm  mm  in 
	1、尺寸
		width:
		height:
	2、边框
		border: 1px solid red;
		solid可替换为下：
		solid：实线
		dotted：点
		dashed：虚线
		double：双线

		边框的属性：border
		border：width style color
		border-top/left/right/bottom：width style color    设置某一边的边框	
		border-radius:3px  设置边框圆角半径
		border-top-left-radius:3px   设置左上角圆角半径
		border：2px solid transparent； 实现透明
	
	是否多有的元素都可以设置边框和大小
		块级元素：都可以设置边框和大小
		行内元素：边框有效  尺寸无效

颜色值得写法：
	1.英文单词  red  green
	2.十六进制:#+后面六位字符  #abcdef
	  范围：0-9  a-f  A-F
	  #ffffff  白色  #fff
	  #000000  黑色  #000
	  #ff0000  红色  #f00
	  #00ff00  绿色  #0f0
	  #0000ff  蓝色  #00f
	  各种灰色:
	  #666 文字的颜色
	  #ccc 边框或背景颜色
	3.rgb（0-255,0-255，0-255）
	  列如：color：rgb（142，468,172）
	4.rgba（0-255,0-255,0-255，0-1）
	  列如：rgba（154,211,176，.5） 0.5透明度 最后一位代表透明度 

框模型、盒子模型：内边距和外边距
	外边距：围绕在元素边框周围的空白区域（元素与元素之间的距离）
		作用：拉开两个元素之间的距离
		外边距的属性：margin
	
		div:为了布局
		<div>
			其他元素
		</div>
		margin:value  四个方向的外边距都是value
		margin:value value  表示的第一个值是上下方向的边距  第二个值是左右方向的值
		margin:value value value  第一个值：上  第二个值：左右  第三个值：下
		margin：（上右下左）

		单边属性设置外边距：
		margin-top/left/right/bottom:value

		margin:auto;       /*设置盒子居中*/
		text-align:center; /*设置文本水平居中*/
		line-height:100px; /*设置文本垂直居中*/

		单位：
		1.px 具体的数值
		2.%  宽和高的占比
		3.auto  只对左右外边距有效
			当块级元素设置宽度为auto时，当前元素可以实现水平居中的位置
		4.负值 移动元素（通常会设置margin-top和margin-left的负值来实现元素的向上或者向下移动）


		 
		

	内边距：内容区域和边框之间的距离（一个元素内的边框与内容之间的距离）
		注意：内边距的改变会改变元素的高度或宽度

		内边距的属性：
		padding:value （四个方向的内边距都为value）
		padding:value value  表示的第一个值是上下方向的边距  第二个值是左右方向的值
		padding:value value value  第一个值：上  第二个值：左右  第三个值：下
		padding:value value  value value（上右下左）
		注意：
		单边属性设置内边距：与外边距相同
		padding-top/left/right/bottom:value（内边距不能设置auto，也不能设置负值）

		实际宽度=左右外边距+左右内边距+左右boeder+width
		实际高度=上下外边距+上下内边距+上下boeder+height

		通过padding变相设置行内元素的大小（不能精确）
		padding-left或padding-right  设置宽度
		padding-top或padding-bottom  设置高度

	注意：  行内元素：不能设置宽度、高度、上下外边距。不能通过margin设置居中	
		
		display:block  将行内元素转化为块级元素
		display:inline 将块级元素转化为行内元素


文本样式：
	1、font-size:15pt；  字体大小
	   font-family:  --字型、
		备用字型：font-family:"microsoft yahei","times";   多个字型，逗号隔开，
		尽量选择同一个系列的字型
	   font-weight:none/bold   设置文本加粗效果
	2、color  文本颜色
	3、text-align:left/center/right  文字对齐方式
		行内元素没有尺寸，对齐无意义，若要让其居中，设置父元素为块级元素，用text-align
	4、line-height:20px;  垂直居中
	5、text-decoration:none/underline   文本下划线
显示：
	1、display:none/block/inline;  决定元素显示的方式；--可以修改元素的默认效果。
		1、none:不显示，常用于隐藏页面元素，实现动态效果，脱离文档流，所以不占据空间。
		2、block:显示为块级元素  显示隐藏元素
		3、inline:显示为行内元素
		4、inline-block：显示为行内快元素，一行内允许显示多个行内快元素，允许修改行和高
显示效果：
	1、隐藏性：
		visibility：
		取值：
			visible		可见
			hidden		元素不可见，但并未脱离文档流，所以依然占据空间。
			collapse	主要用在表格元素上，当删除一行或一列时不隐藏表格的整个布局
	2、透明度：控制元素的透明度
		opacity：
		取值：0~1之间的数字
	3、vartical-align:
		作用：
		1.设置单元格的垂直对齐方式
		2.行内块或图片的垂直对齐方式
			指定行内块元素或图片元素两边的文本，相对于他们的垂直对齐方式
		取值：
		1、baseline  （默认）基线对齐  
		2、top
		3、middle
		4、bottom
		注意：对于图像来讲，可以设置vartical-align为非baseline以外的其他值来解决多余的3个像素
	 4、cursor:
		取值：
		default  默认
		pointer	  小手
		crosshair  +
		help	帮助  问号
		wait   等待 沙漏 小表
		text   I的样子


定位
1、浮动定位：多个块级元素位于同一行
	1、定位：决定元素的位置
		默认定位方式：静态布局，块级元素从上到下挨个排列，行内元素从左到右挨个排列
		浮动定位、相对定位，绝对定位、固定定位
	
	2、浮动定位：
		float:left/right/none;
		元素将脱离原有的层，往上移动一层，停靠在一侧， 原有的位置被释放出来，
		后续的元素占有float元素原来的位置。
		注意：	
		1.当父级元素的宽度，显示不下所有的以浮动元素，那么将会换行 
		4.文本环绕
	3、clear:left/right/both; 清除周浮动元素的影响；
		clear:left;  清除向左浮动的影响
	4.浮动元素对父元素的影响
		1.
		2.
		3.
		4.在父元素中追加空块级元素，设置clear:both;
		
2、相对定位：
	position:raletive  设置为相对定位  元素脱离原有层 原有位置保留  适合移动小范围的地方
	top:100px;	位置偏移属性，向右偏移100px
	left:100px;	位置偏移属性，向下偏移100px
	z-index:4;	堆叠层数，设置元素的所在层数，可取负值。

3、绝对定位：(弹出菜单)
	position:absolute;	设置为绝对定位  元素脱离原有层  原有的位置不在保留
	弹出菜单： 
		1.弹出的东西要压在页面的其他正常的内容之上--脱离文档流
		2.弹出的内容都是关联定位。
	z-index：只正对以定位的元素
	父子级关系的元素，是没法通过z-index调整堆叠顺序的

4、固定定位
	position:fixed; 不会随着滚动条滚动
		特点：脱离文档流，不占用页面空间


















css3高级
动画：某种变化，不是瞬间完成，而是在一段时间内完成。
	1、哪些变化，可以使实现动画。
		和数值相关的样式了实现渐变效果（颜色、尺寸）
	两种方法：过度，复杂动画

一、过渡：	慢慢变化
	1、transition:color 3s linear 1s;   颜色在3秒内完成变化   谁在多长时间内完成变化

二、转化：改变元素的尺寸、位置、角度、形状。
	transform:属性样式，表示元素将发生改变
	原点：transform-origin：value value；x轴和y轴

	1、缩放
		transform:scale(0.5);---等比例缩放，不仅仅是尺寸，包括内容
	2、位置
		transform:translateX(100);
	3、旋转
		transform:rotate(45deg);
	transform-style:规定如何在3d空间中呈现背嵌套的元素
		取值：
			1.flat:子元素将不保留器3d位置
			2.preserve-3d  子元素保留其3d位置


三、复杂动画：
	1、动画帧：声明一个动画，名为m1.
		@keyframes m1{
			from{
				color:red;
				transform:translateX(0);
			}
			5%{
				background	
			}
			to{
				color:blue;
				transform:translateX(300px);
			}
		}
	 2、animation:m1 3s linear;   用animation调用m1
		animation-iteration-count:100;  播放次数 infinite 一直播放
		animation-direction：normal/reverse/alternate  奇数正向
 
	


2、过渡
3、动画
4、代码优化


	<div><a href="#" class="left"></a></div>
					<ul>
						<li><a href=""><img src="Images/images/pro_s1.jpg"></a></li>
						<li><a href=""><img src="Images/images/pro_s2.jpg"></a></li>
						<li><a href=""><img src="Images/images/pro_s3.jpg"></a></li>
						<li><a href=""><img src="Images/images/pro_s4.jpg"></a></li>
						<li><a href=""><img src="Images/images/pro_s5.jpg"></a></li>
					</ul>
					<div><a href="#" class="right"></a></div>